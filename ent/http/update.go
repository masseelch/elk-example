// Code generated by entc, DO NOT EDIT.

package http

import (
	"elk-example/ent"
	"elk-example/ent/pet"
	"elk-example/ent/user"
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/go-chi/chi/v5"
	"github.com/go-playground/validator/v10"
	"github.com/liip/sheriff"
	"github.com/masseelch/render"
	"go.uber.org/zap"
)

// Payload of a ent.Pet update request.
type PetUpdateRequest struct {
	Name  *string `json:"name"`
	Age   *int    `json:"age" validate:"required,gt=0"`
	Owner *int    `json:"owner" validate:"required"`
}

// Update updates a given ent.Pet and saves the changes to the database.
func (h PetHandler) Update(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Update"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	// Get the post data.
	var d PetUpdateRequest
	if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	// Validate the data.
	if err := h.validator.Struct(d); err != nil {
		if err, ok := err.(*validator.InvalidValidationError); ok {
			l.Error("error validating request data", zap.Error(err))
			render.InternalServerError(w, r, nil)
			return
		}
		l.Info("validation failed", zap.Error(err))
		render.BadRequest(w, r, err)
		return
	}
	// Save the data.
	b := h.client.Pet.UpdateOneID(id)
	// TODO: what about slice fields that have custom marshallers?
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Age != nil {
		b.SetAge(*d.Age)
	}
	if d.Owner != nil {
		b.SetOwnerID(*d.Owner)

	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			l.Info("pet not found", zap.Int("id", id), zap.Error(err))
			render.NotFound(w, r, "pet not found")
		case *ent.NotSingularError:
			l.Error("duplicate entry for pet", zap.Int("id", id), zap.Error(err))
			render.BadRequest(w, r, "duplicate pet entry with id "+strconv.Itoa(e.ID))
		default:
			l.Error("error saving pet", zap.Int("id", id), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	// Reload entry.
	q := h.client.Pet.Query().Where(pet.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Int("id", e.ID), zap.Error(err))
			render.NotFound(w, r, msg)
		default:
			l.Error("error fetching pet from db", zap.Int("id", e.ID), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	j, err := sheriff.Marshal(&sheriff.Options{
		IncludeEmptyTag: true,
		Groups:          []string{"pet"},
	}, e)
	if err != nil {
		l.Error("serialization error", zap.Int("id", e.ID), zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("pet rendered", zap.Int("id", e.ID))
	render.OK(w, r, j)
}

// Payload of a ent.User update request.
type UserUpdateRequest struct {
	Name *string `json:"name"`
	Age  *int    `json:"age"`
	Pets []int   `json:"pets"`
}

// Update updates a given ent.User and saves the changes to the database.
func (h UserHandler) Update(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Update"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	// Get the post data.
	var d UserUpdateRequest
	if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	// Validate the data.
	if err := h.validator.Struct(d); err != nil {
		if err, ok := err.(*validator.InvalidValidationError); ok {
			l.Error("error validating request data", zap.Error(err))
			render.InternalServerError(w, r, nil)
			return
		}
		l.Info("validation failed", zap.Error(err))
		render.BadRequest(w, r, err)
		return
	}
	// Save the data.
	b := h.client.User.UpdateOneID(id)
	// TODO: what about slice fields that have custom marshallers?
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Age != nil {
		b.SetAge(*d.Age)
	}
	if d.Pets != nil {
		b.ClearPets().AddPetIDs(d.Pets...)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			l.Info("user not found", zap.Int("id", id), zap.Error(err))
			render.NotFound(w, r, "user not found")
		case *ent.NotSingularError:
			l.Error("duplicate entry for user", zap.Int("id", id), zap.Error(err))
			render.BadRequest(w, r, "duplicate user entry with id "+strconv.Itoa(e.ID))
		default:
			l.Error("error saving user", zap.Int("id", id), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	// Reload entry.
	q := h.client.User.Query().Where(user.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Int("id", e.ID), zap.Error(err))
			render.NotFound(w, r, msg)
		default:
			l.Error("error fetching user from db", zap.Int("id", e.ID), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	j, err := sheriff.Marshal(&sheriff.Options{
		IncludeEmptyTag: true,
		Groups:          []string{"user"},
	}, e)
	if err != nil {
		l.Error("serialization error", zap.Int("id", e.ID), zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("user rendered", zap.Int("id", e.ID))
	render.OK(w, r, j)
}
