// Code generated by entc, DO NOT EDIT.

package http

import (
	"elk-example/ent"
	"elk-example/ent/pet"
	"elk-example/ent/user"
	"net/http"
	"strconv"
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/liip/sheriff"
	"github.com/masseelch/render"
	"go.uber.org/zap"
)

// Owner fetches the ent.owner attached to the ent.Pet
// identified by a given url-parameter from the database and renders it to the client.
func (h PetHandler) Owner(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Owner"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	// Create the query to fetch the owner attached to this pet
	q := h.client.Pet.Query().Where(pet.ID(id)).QueryOwner()
	// Eager load edges that are required on read operation.
	q.WithPets()
	e, err := q.Only(r.Context())
	if err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			msg := h.stripEntError(err)
			l.Info(msg, zap.Int("id", id), zap.Error(err))
			render.NotFound(w, r, strings.TrimPrefix(err.Error(), "ent: "))
		case *ent.NotSingularError:
			msg := h.stripEntError(err)
			l.Error(msg, zap.Int("id", id), zap.Error(err))
			render.BadRequest(w, r, strings.TrimPrefix(err.Error(), "ent: "))
		default:
			l.Error("error fetching user from db", zap.Int("pet.id", id), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	d, err := sheriff.Marshal(&sheriff.Options{
		IncludeEmptyTag: true,
		Groups:          []string{"user"},
	}, e)
	if err != nil {
		l.Error("serialization error", zap.Int("id", e.ID), zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("user rendered", zap.Int("id", e.ID))
	render.OK(w, r, d)
}

// Pets fetches the ent.pets attached to the ent.User
// identified by a given url-parameter from the database and renders it to the client.
func (h UserHandler) Pets(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Pets"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	// Create the query to fetch the pets attached to this user
	q := h.client.User.Query().Where(user.ID(id)).QueryPets()
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			render.BadRequest(w, r, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			render.BadRequest(w, r, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching pets from db", zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	d, err := sheriff.Marshal(&sheriff.Options{
		IncludeEmptyTag: true,
		Groups:          []string{"user"},
	}, es)
	if err != nil {
		l.Error("serialization error", zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("pets rendered", zap.Int("amount", len(es)))
	render.OK(w, r, d)
}
